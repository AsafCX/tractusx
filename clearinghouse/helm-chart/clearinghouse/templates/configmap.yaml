
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "clearinghouse.fullname" . }}
  labels:
    {{- include "clearinghouse.labels" . | nindent 4 }}
data:
  config.yml : |
    database_url: {{ .Release.Name }}-clearinghouse-api-mongo
    database_port: 27017
    init_db: true

    document_api_url: http://localhost:8001
    blockchain_api_url: http://172.31.6.49:8003
    keyring_api_url: http://localhost:8002
    daps_api_url: https://catenaxdev001akssrv.germanywestcentral.cloudapp.azure.com/daps
    server_name: https://catenaxdev001akssrv.germanywestcentral.cloudapp.azure.com/tsy/ch/
    server_model: 4.0.0
    server_agent: https://catenaxdev001akssrv.germanywestcentral.cloudapp.azure.com/tsy/ch
  allow-all-flows.pl: |
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %   Prolog representation of a data flow policy
    %   
    %   Source: default
    %
    %	Do not edit this file, it has been generated automatically
    % 	by XText/Xtend.
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %
    % Only required for SWI-Prolog
    % Allow the following predicates to be scattered around the prolog file.
    % Otherwise Prolog will issue a warning if they are not stated in subsequent lines.
    %:- discontiguous service/1.
    %:- discontiguous has_endpoint/2.
    %:- discontiguous creates_label/2.
    %:- discontiguous removes_label/2.
    %:- discontiguous rule/1.
    %:- discontiguous rule_priority/2.
    %:- discontiguous receives_label/1.
    %:- discontiguous has_decision/2.
    %:- discontiguous has_target/2.
    %:- discontiguous has_capability/2.
    %:- discontiguous has_property/3.
    %:- discontiguous requires_prerequisites/2.
    %:- discontiguous has_alternativedecision/2.
    %:- discontiguous has_obligation/2.

    %%%%%%%%% Basic Blocking Rule %%%%%%%%%%
    rule(dropAll).
    rule_priority(dropAll,0).
    has_decision(dropAll,drop).
    receives_label(dropAll).
    has_target(dropAll,serviceAll).

    %%%%%%%%%% Catch All Service %%%%%%%%%%%
    service(serviceAll).
    has_endpoint(serviceAll,'.*').

    %%%%%%%%%%%%%%%% Rules %%%%%%%%%%%%%%%%%
    % Allow everything
    rule(allowAll).
    rule_priority(allowAll, 1).
    has_target(allowAll, serviceAll).
    receives_label(allowAll).
    has_decision(allowAll, allow).
  clearing-house-routes.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns:camel="http://camel.apache.org/schema/spring"
          xsi:schemaLocation="http://www.springframework.org/schema/beans
              http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
              http://camel.apache.org/schema/spring
              http://camel.apache.org/schema/spring/camel-spring.xsd">

        <!-- Beans -->
        <bean id="responseProcessor" class="de.fhg.aisec.ids.clearinghouse.ClearingHouseOutputProcessor" />
        <bean id="queryResponseProcessor" class="de.fhg.aisec.ids.clearinghouse.ClearingHouseQueryOutputProcessor" />
        <bean id="createPidProcessor" class="de.fhg.aisec.ids.clearinghouse.ClearingHouseCreatePidProcessor" />
        <bean id="logProcessor" class="de.fhg.aisec.ids.clearinghouse.ClearingHouseLogProcessor" />
        <bean id="queryProcessor" class="de.fhg.aisec.ids.clearinghouse.ClearingHouseQueryProcessor" />
        
        <!-- Routes -->
        <camelContext xmlns="http://camel.apache.org/schema/spring">
            <restConfiguration component="jetty" host="0.0.0.0" port="9999" bindingMode="off" />
            <rest id="CH_REST">
                <post uri="/messages/query/{pid}" id="CH_QUERY_PID">
                    <to uri="direct:query" />
                </post>
                <post uri="/messages/query/{pid}/{id}" id="CH_QUERY_PID_ID">
                    <to uri="direct:query" />
                </post>
                <post uri="/messages/log/{pid}" id="CH_LOG_PID">
                    <to uri="direct:log" />
                </post>
                <post uri="/process/{pid}" id="CH_CREATE_PID">
                    <to uri="direct:createPid" />
                </post>
            </rest>
            <route id="CH_ROUTE_CREATE">
                <from uri="direct:createPid"/>
                <process ref="createPidProcessor" />
                <to uri="http://localhost:8000/?bridgeEndpoint=true&amp;throwExceptionOnFailure=false" />
                <process ref="responseProcessor" />
            </route>
            <route id="CH_ROUTE_LOG">
                <from uri="direct:log"/>
                <process ref="logProcessor" />
                <to uri="http://localhost:8000/?bridgeEndpoint=true&amp;throwExceptionOnFailure=false" />
                <process ref="responseProcessor" />
            </route>
            <route id="CH_ROUTE_QUERY">
                <from uri="direct:query"/>
                <process ref="queryProcessor" />
                <to uri="http://localhost:8000/?bridgeEndpoint=true&amp;throwExceptionOnFailure=false" />
                <process ref="queryResponseProcessor" />
            </route>
        </camelContext>
    </beans>
  default_doc_type.json: |
    {
      "id": "IDS_MESSAGE",
      "pid": "default",
      "parts": [
        {
          "name": "model_version"
        },
        {
          "name": "correlation_message"
        },
        {
          "name": "transfer_contract"
        },
        {
          "name": "issued"
        },
        {
          "name": "issuer_connector"
        },
        {
          "name": "content_version"
        },
        {
          "name": "recipient_connector"
        },
        {
          "name": "sender_agent"
        },
        {
          "name": "recipient_agent"
        },
        {
          "name": "payload"
        },
        {
          "name": "payload_type"
        },
        {
          "name": "message_id"
        }
      ]
    }
